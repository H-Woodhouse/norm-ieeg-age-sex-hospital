# format patient same as metadata
channel_BPs$Patient_ID=as.integer(substring(channel_BPs$Patient_ID, 3, 5))
channel_BPs$Patient_ID=sprintf("%03d",channel_BPs$Patient_ID)
# Meta
# give patient id same name in both data sets
colnames(meta)[1] = "Patient_ID"
# removing duplicate rows
meta = meta %>% distinct()
# drop na (is.nan doesn't find them)
meta=meta[-c(which(meta$Age==NaN)),]
# give ROI index same name in BP df and info df in order to join
colnames(coords)[1]="ROI1"
# retain relevant columns from ROI info
ROI_info = select(coords, -c(x,y,z,Full.name))
# combine too add in ROI name, hemipshere, cortical
# left join drops any ROI info which we don't have signals for
channel_BPs = left_join(channel_BPs, ROI_info, by="ROI1") %>%
relocate(c(Cortical, Hemisphere, Area), .after = ROI1)
# drop subcortical
channel_BPs_cortical = channel_BPs %>%
filter(Cortical == "C") %>%
select(-c(Cortical,Hemisphere))
## ONE HEMISPHERE, AVERAGED ##
# need to 'fold over' BEFORE averaging !
# empty column for matching ROIs between hemispheres
channel_BPs_cRHS = channel_BPs_cortical %>%
mutate(ROI1_right = NA) %>%
relocate(ROI1_right, .after = ROI1)
# fill with the right hemipshere ROI number for each pair
ROI_names = unique(channel_BPs_cRHS$Area)
for (i in ROI_names) {
channel_BPs_cRHS[channel_BPs_cRHS$Area==i,]$ROI1_right = max(channel_BPs_cRHS[channel_BPs_cRHS$Area==i,"ROI1"])
}
# drop area and original roi
channel_BPs_cRHS = select(channel_BPs_cRHS, -c(ROI1,Area))
View(channel_BPs_cRHS)
# average within ROI, one value in each freq band per patient per ROI
ROI_BPs_cRHS = channel_BPs_cRHS %>%
group_by(Patient_ID,ROI1_right) %>%
summarise(deltaBP = mean(delta_logrelBP), thetaBP = mean(theta_logrelBP),
alphaBP = mean(alpha_logrelBP), betaBP = mean(beta_logrelBP),
gammaBP = mean(gamma_logrelBP))
View(ROI_BPs_cRHS)
patient_nos = data_frame(ROI=order(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=vector(length=unique(ROI_BPs_cRHS$ROI1_right)))
patient_nos = data_frame(ROI=order(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=vector(length=length(unique(ROI_BPs_cRHS$ROI1_right))))
View(patient_nos)
patient_nos = data_frame(ROI=unique(ROI_BPs_cRHS$ROI1_right), no_pts=vector(length=length(unique(ROI_BPs_cRHS$ROI1_right))))
View(patient_nos)
patient_nos = data_frame(ROI=unique(ROI_BPs_cRHS$ROI1_right), no_pts=double())
View(patient_nos)
patient_nos = data_frame(ROI=unique(ROI_BPs_cRHS$ROI1_right), no_pts=double()) %>% arrange(by_group=ROI)
patient_nos = data_frame(ROI=unique(ROI_BPs_cRHS$ROI1_right), no_pts=double())
View(patient_nos)
patient_nos = data_frame(ROI=unique(ROI_BPs_cRHS$ROI1_right), no_pts=rep(0,34))
View(patient_nos)
for (i in patient_nos$ROI) {
patient_nos[patient_nos$ROI==i,]=nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==i,])
}
View(patient_nos)
patient_nos = data_frame(ROI=order(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=rep(0,34))
View(patient_nos)
order(unique(ROI_BPs_cRHS$ROI1_right))
sort(unique(ROI_BPs_cRHS$ROI1_right))
patient_nos = data_frame(ROI=sort(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=rep(0,34))
View(patient_nos)
for (i in 1:34) {
patient_nos$ROI[i]=nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==patient_nos$ROI,])
}
View(patient_nos)
patient_nos$no_pts[i]=nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==patient_nos$ROI,])
patient_nos = data_frame(ROI=sort(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=rep(0,34))
for (i in 1:34) {
patient_nos$no_pts[i]=nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==patient_nos$ROI,])
}
View(patient_nos)
patient_nos = data_frame(ROI=sort(unique(ROI_BPs_cRHS$ROI1_right)), no_pts=rep(0,34))
for (i in 1:34) {
roi=patient_nos$ROI[i]
patient_nos$no_pts[i]=nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==roi,])
}
View(patient_nos)
nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==15,])
nrow(ROI_BPs_cRHS[ROI_BPs_cRHS$ROI1_right==52,])
write.csv(patient_nos, file="patients_per_ROI1_cRHS.csv", row.names = F)
patient_nos - read.csv("/media/b6036780/8TB1/Modelling-Age/Input/RAM/patients_per_ROI1_cRHS.csv")
## PRELIMINARIES
# load in MCMC output
setwd("/media/b6036780/8TB1/Modelling-Age/Output")
for (fb in c("alpha","beta","gamma","delta","theta")) {
load(paste0("MCMC-samples/b1_", fb, ".rda"))
}
# load ROI info
ROI_info = read.csv("/media/b6036780/8TB1/Modelling-Age/Input/RAM/ROI1_info.csv")
patient_nos = read.csv("/media/b6036780/8TB1/Modelling-Age/Input/RAM/patients_per_ROI1_cRHS.csv")
# packages
library(tidyverse) # ggplot2, dplyr etc
library(rjags) # for proper summary() of mcmc object
library(scales) # axis labels
library(egg) # grouping plots
library(plotly) #interactive maps
theme_set(theme_minimal())
# roi info
colnames(ROI_info)[1]="ROI_label"
b1_post_summaries=data_frame(ROI_index=1:34, ROI_label=ROI_index+48)
b1_post_summaries=left_join(b1_post_summaries,ROI_info,by="ROI_label") %>%
select(-c(Full.name,Hemisphere,Cortical))
# mcmc output info
b1_post_summaries$delta_mean=summary(output_del)$statistics[,"Mean"]
b1_post_summaries$delta_SD=summary(output_del)$statistics[,"SD"]
b1_post_summaries$delta_tsSE=summary(output_del)$statistics[,"Time-series SE"]
b1_post_summaries$theta_mean=summary(output_the)$statistics[,"Mean"]
b1_post_summaries$theta_SD=summary(output_the)$statistics[,"SD"]
b1_post_summaries$theta_tsSE=summary(output_the)$statistics[,"Time-series SE"]
b1_post_summaries$alpha_mean=summary(output_alp)$statistics[,"Mean"]
b1_post_summaries$alpha_SD=summary(output_alp)$statistics[,"SD"]
b1_post_summaries$alpha_tsSE=summary(output_alp)$statistics[,"Time-series SE"]
b1_post_summaries$beta_mean=summary(output_bet)$statistics[,"Mean"]
b1_post_summaries$beta_SD=summary(output_bet)$statistics[,"SD"]
b1_post_summaries$beta_tsSE=summary(output_bet)$statistics[,"Time-series SE"]
b1_post_summaries$gamma_mean=summary(output_gam)$statistics[,"Mean"]
b1_post_summaries$gamma_SD=summary(output_gam)$statistics[,"SD"]
b1_post_summaries$gamma_tsSE=summary(output_gam)$statistics[,"Time-series SE"]
View(b1_post_summaries)
View(patient_nos)
View(patient_nos)
colnames(patient_nos)[1]="ROI_label"
colnames(ROI_info)[1]="ROI_label"
b1_post_summaries=data_frame(ROI_index=1:34, ROI_label=ROI_index+48)
b1_post_summaries=left_join(b1_post_summaries,ROI_info,by="ROI_label") %>%
select(-c(Full.name,Hemisphere,Cortical))
b1_post_summaries=left_join(b1_post_summaries, patient_nos,by="ROI_label")
View(b1_post_summaries)
# mcmc output info
b1_post_summaries$delta_mean=summary(output_del)$statistics[,"Mean"]
b1_post_summaries$delta_SD=summary(output_del)$statistics[,"SD"]
b1_post_summaries$delta_tsSE=summary(output_del)$statistics[,"Time-series SE"]
b1_post_summaries$theta_mean=summary(output_the)$statistics[,"Mean"]
b1_post_summaries$theta_SD=summary(output_the)$statistics[,"SD"]
b1_post_summaries$theta_tsSE=summary(output_the)$statistics[,"Time-series SE"]
b1_post_summaries$alpha_mean=summary(output_alp)$statistics[,"Mean"]
b1_post_summaries$alpha_SD=summary(output_alp)$statistics[,"SD"]
b1_post_summaries$alpha_tsSE=summary(output_alp)$statistics[,"Time-series SE"]
b1_post_summaries$beta_mean=summary(output_bet)$statistics[,"Mean"]
b1_post_summaries$beta_SD=summary(output_bet)$statistics[,"SD"]
b1_post_summaries$beta_tsSE=summary(output_bet)$statistics[,"Time-series SE"]
b1_post_summaries$gamma_mean=summary(output_gam)$statistics[,"Mean"]
b1_post_summaries$gamma_SD=summary(output_gam)$statistics[,"SD"]
b1_post_summaries$gamma_tsSE=summary(output_gam)$statistics[,"Time-series SE"]
# keep required cortical ROI info
b1_summaries_mirror=ROI_info %>%
filter(Cortical=="C") %>%
select(ROI_label,x,y,z,Area)
# add post summaries
b1_summaries_mirror=left_join(b1_summaries_mirror,b1_post_summaries,by="ROI_label")
# drop extra cols
b1_summaries_mirror=b1_summaries_mirror %>%
select(-c(ROI_index,x.y,y.y,z.y,Area.y)) %>%
rename(x=x.x,y=y.x,z=z.x,Area=Area.x)
View(b1_summaries_mirror)
# fill in mirrored posterior values
for (i in 1:34) {
area=b1_summaries_mirror[i,"Area"] # area of empty ROI
match=max(which(b1_summaries_mirror$Area==area)) # mirrored ROI label number
b1_summaries_mirror[i,6:21]=b1_summaries_mirror[match,6:21]
}
# interactive plot (hover for ROI label and number)
interactive_mean_map=function(stat,colourscale,title){
plot_ly(b1_summaries_mirror, x=~x, y=~y, z=~z, text=~paste('ROI:',ROI_label, '<br>Name:',Area, 'No. pts:',no_pts),
marker=list(color=stat, showscale=T,size=8,
colorscale=colourscale)) %>%
layout(title=title,paper_bgcolor = "#E3E3E3") %>%
add_markers()
}
# keeping 0 as the light colour
interactive_mean_map(~delta_mean,list(c(0,0.5,1),c("#000000","#4F4FFF","#FFFFFF")),"Delta")
# interactive plot (hover for ROI label and number)
interactive_mean_map=function(stat,colourscale,title){
plot_ly(b1_summaries_mirror, x=~x, y=~y, z=~z, text=~paste('ROI:',ROI_label, '<br>Name:',Area, '<br>No. pts:',no_pts),
marker=list(color=stat, showscale=T,size=8,
colorscale=colourscale)) %>%
layout(title=title,paper_bgcolor = "#E3E3E3") %>%
add_markers()
}
# keeping 0 as the light colour
interactive_mean_map(~delta_mean,list(c(0,0.5,1),c("#000000","#4F4FFF","#FFFFFF")),"Delta")
interactive_mean_map(~theta_mean,list(c(0,0.3,0.6,1),c("#000000","#B74FFF","#FFFFFF","#B74FFF")),"Theta")
interactive_mean_map(~alpha_mean,list(c(0,0.5,1),c("#FFFFFF","#FF4FC6","#000000")),"Alpha")
interactive_mean_map(~beta_mean,list(c(0,0.5,1),c("#FFFFFF","#00D24F","#000000")),"Beta")
interactive_mean_map(~gamma_mean,list(c(0,0.5,1),c("#FFFFFF","#00DDC1","#000000")),"Gamma")
interactive_mean_map(~theta_mean,list(c(0,0.3,0.6,1),c("#000000","#B74FFF","#FFFFFF","#B74FFF")),"Theta")
interactive_mean_map(~gamma_mean,list(c(0,0.3,0.6,1,c("#FFFFFF","#00DDC1","#000000")),"Gamma")
interactive_mean_map(~gamma_mean,list(c(0,0.3,0.6,1),c("#FFFFFF","#00DDC1","#000000")),"Gamma")
interactive_mean_map(~gamma_mean,list(c(0,0.3,0.6,1),c("#FFFFFF","#00DDC1","#000000")),"Gamma")
interactive_mean_map(~gamma_mean,list(c(0,0.3,0.6,1),c("#00DDC1","#FFFFFF","#00DDC1","#000000")),"Gamma")
# import summaries
setwd("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Output/")
mod_summaries = read.csv("age_ROI_stats.csv")
CIs = read.csv("age_wholebrain_stats.csv")
# load ROI info from DB
ROI1_info=read.csv("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Data/ROI1_info.csv")
# colours
fb_colors=c("#3366ff","#bf80ff","#ff00bf","#3de600","#00cccc")
# bands
band = c("delta","theta","alpha","beta","gamma")
# greek letters
fb_lab=c(expression(delta),expression(theta),expression(alpha),expression(beta),expression(gamma))
# attach roi & ppr info to region level stats
# need column to indicate if there's singularity in *any* fb for each ROI
# theta has no singular
region_summaries=left_join(ROI1_info,mod_summaries)
# packages
library(tidyverse)                 # data frames & ggplot
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(Area=factor(Area,levels=Area)) %>%
mutate(any_singular = if_else(delta_singular==1|alpha_singular==1|beta_singular==1|gamma_singular==1,1,0)) %>%
relocate(any_singular, .after = no.sites)
# attach roi & ppr info to region level stats
# need column to indicate if there's singularity in *any* fb for each ROI
# theta has no singular
region_summaries=left_join(ROI1_info,mod_summaries)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(Area=factor(Area,levels=Area)) %>%
mutate(any_singular = if_else(delta_singular==1|alpha_singular==1|beta_singular==1|gamma_singular==1,1,0)) %>%
relocate(any_singular, .after = no.sites)
View(region_summaries)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>% rename(Area,ROI_name) %>%
mutate(Area=factor(Area,levels=Area)) %>%
mutate(any_singular = if_else(delta_singular==1|alpha_singular==1|beta_singular==1|gamma_singular==1,1,0)) %>%
relocate(any_singular, .after = no.sites)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>% rename(ROI_name, Area) %>%
mutate(Area=factor(Area,levels=Area)) %>%
mutate(any_singular = if_else(delta_singular==1|alpha_singular==1|beta_singular==1|gamma_singular==1,1,0)) %>%
relocate(any_singular, .after = no.sites)
# import summaries
setwd("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Output/")
mod_summaries = read.csv("age_ROI_stats.csv")
CIs = read.csv("age_wholebrain_stats.csv")
# load ROI info from DB
ROI1_info=read.csv("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Data/ROI1_info.csv")
# colours
fb_colors=c("#3366ff","#bf80ff","#ff00bf","#3de600","#00cccc")
# bands
band = c("delta","theta","alpha","beta","gamma")
# greek letters
fb_lab=c(expression(delta),expression(theta),expression(alpha),expression(beta),expression(gamma))
# attach roi & ppr info to region level stats
# need column to indicate if there's singularity in *any* fb for each ROI
# theta has no singular
region_summaries=left_join(ROI1_info,mod_summaries)
View(region_summaries)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(ROI_name=factor(ROI_name,levels=ROI_name)) %>%
mutate(any_singular = if_else(delta_singular==1|alpha_singular==1|beta_singular==1|gamma_singular==1,1,0)) %>%
relocate(any_singular, .after = no.sites)
View(region_summaries_RH)
# import summaries
setwd("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Output/")
mod_summaries = read.csv("age_ROI_stats.csv")
CIs = read.csv("age_wholebrain_stats.csv")
# load ROI info from DB
ROI1_info=read.csv("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Data/ROI1_info.csv")
# attach roi & ppr info to region level stats
# need column to indicate if there's singularity in *any* fb for each ROI
# theta has no singular
region_summaries=left_join(ROI1_info,mod_summaries)
library(reshape)                   # melting data frames
conflict_prefer("rename","dplyr")  # use rename from dplyr
conflict_prefer("filter", "dplyr")
library(conflicted)                # handle package clashes
conflict_prefer("rename","dplyr")  # use rename from dplyr
conflict_prefer("filter", "dplyr")
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(ROI_name=factor(ROI_name,levels=ROI_name)) %>%
rename(Area, ROI_name)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(ROI_name=factor(ROI_name,levels=ROI_name)) %>%
rename(ROI_name, Area)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(ROI_name=factor(ROI_name,levels=ROI_name)) %>%
rename(Area=ROI_name)
View(region_summaries_RH)
# create factor for whole brain
CIs = CIs %>% mutate(Band=factor(Band, levels=Band))
# clear work space
rm(mod_summaries, ROI1_info)
ppr=ggplot(data=region_summaries_RH) +
geom_col(aes(x=Area,y=no.pts), fill="grey") +ylab("No. of subjects in region") +
theme(axis.title.y=element_text(margin=margin(r=10)),axis.text.x=element_blank(),
axis.title.x = element_blank(),panel.grid.major.x = element_blank())
region_CI = region_summaries_RH %>%
select(c("Area","no.pts",paste0(band,"_none0_CI"),paste0(band,"_singular")))
# make different indicator for each fb (delta: 0s & 1s, theta: 0s and 2s, etc)
# this enables plotting each band in a different colour
for (i in 2:5) {
region_CI[,paste0(band[i],"_none0_CI")] = region_CI[,paste0(band[i],"_none0_CI")]*(i)
}
# need to also include a singularity indicator in each fb column
# if singular, CI indicator doesn't matter/is overwritten
# assign -1 = singular, then there's still the 0 & n for the CI indicator
region_CI = region_CI %>%
mutate(delta_none0_CI = if_else(delta_singular==1,-1,delta_none0_CI)) %>%
mutate(theta_none0_CI = if_else(theta_singular==1,-1,theta_none0_CI)) %>%
mutate(alpha_none0_CI = if_else(alpha_singular==1,-1,alpha_none0_CI)) %>%
mutate(beta_none0_CI  = if_else(beta_singular ==1,-1,beta_none0_CI))  %>%
mutate(gamma_none0_CI = if_else(gamma_singular==1,-1,gamma_none0_CI)) %>%
select(-c(paste0(band,"_singular")))
# melt for suitable ggplot format and reformat new columns
region_CI = melt(region_CI, id.vars=c("Area","no.pts"))
region_CI = region_CI %>%
rename(freqband=variable) %>% mutate(freqband=gsub("_none0_CI","",freqband)) %>%
mutate(freqband=factor(freqband,levels = band)) %>% rename(none0_CI=value) %>%
mutate(none0_CI=factor(none0_CI,levels=-1:5))
View(region_CI)
# factor level order is -1 (singular), 0 (CI has 0), 1:5 (CI is none 0)
CI=ggplot(data = region_CI) +
geom_tile(aes(x=Area,y=freqband,fill=none0_CI),show.legend = F) +
xlab(NULL) + ylab(NULL) + scale_y_discrete(labels=rev(fb_lab), limits=rev) +
theme(axis.text.x=element_blank(),panel.grid.major.x=element_blank()) +
scale_fill_manual(values = c("black","white",fb_colors)) +
annotate("label", x=32.5,y=5,size=4.5,label="Shaded: CI does not contain 0\nWhite: CI contains 0\nBlack: Singular fit")
region_SE = region_summaries_RH %>%
select(c("Area","no.pts","any_singular",paste0(band,"_SE")))
region_SE = region_summaries_RH %>%
select(c("Area","no.pts",paste0(band,"_SE")))
# melt for suitable ggplot format and reformat resulting columns
region_SE = melt(region_SE, id.vars=c("Area","no.pts"))
region_SE = region_SE %>%
rename(freqband=variable) %>% mutate(freqband=gsub("_SE","",freqband)) %>%
mutate(freqband=factor(freqband,levels = band)) %>% rename(SE=value)
View(region_SE)
library(scales)                    # unit control for plots
library(grid)                      # to combine plots
SE=ggplot(data=region_SE) +
geom_line(aes(x=Area,y=SE, group=freqband,color=freqband)) +
ylab(expression(paste("Standard error of ",b[age]))) + xlab("Region name") +
scale_y_continuous(labels = comma) + scale_color_manual(values = fb_colors, labels=fb_lab) +
theme(axis.text.x=element_text(hjust=0,angle=-90,vjust=0.5),
legend.title=element_blank(), legend.position = c(0.8,0.7), legend.background = element_rect(colour="grey"),
axis.title.x=element_text(margin=margin(t=10)),axis.title.y=element_text(margin=margin(r=10)),
panel.grid.major.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(ppr),ggplotGrob(CI),ggplotGrob(SE)))
theme_set(theme_minimal(base_size = 24))
ppr=ggplot(data=region_summaries_RH) +
geom_col(aes(x=Area,y=no.pts), fill="grey") +ylab("No. of subjects in region") +
theme(axis.title.y=element_text(margin=margin(r=10)),axis.text.x=element_blank(),
axis.title.x = element_blank(),panel.grid.major.x = element_blank())
# factor level order is -1 (singular), 0 (CI has 0), 1:5 (CI is none 0)
CI=ggplot(data = region_CI) +
geom_tile(aes(x=Area,y=freqband,fill=none0_CI),show.legend = F) +
xlab(NULL) + ylab(NULL) + scale_y_discrete(labels=rev(fb_lab), limits=rev) +
theme(axis.text.x=element_blank(),panel.grid.major.x=element_blank()) +
scale_fill_manual(values = c("black","white",fb_colors)) +
annotate("label", x=32.5,y=5,size=4.5,label="Shaded: CI does not contain 0\nWhite: CI contains 0\nBlack: Singular fit")
SE=ggplot(data=region_SE) +
geom_line(aes(x=Area,y=SE, group=freqband,color=freqband)) +
ylab(expression(paste("Standard error of ",b[age]))) + xlab("Region name") +
scale_y_continuous(labels = comma) + scale_color_manual(values = fb_colors, labels=fb_lab) +
theme(axis.text.x=element_text(hjust=0,angle=-90,vjust=0.5),
legend.title=element_blank(), legend.position = c(0.8,0.7), legend.background = element_rect(colour="grey"),
axis.title.x=element_text(margin=margin(t=10)),axis.title.y=element_text(margin=margin(r=10)),
panel.grid.major.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(ppr),ggplotGrob(CI),ggplotGrob(SE)))
# packages
library(tidyverse)                 # data frames & ggplot
library(reshape)                   # melting data frames
library(scales)                    # unit control for plots
library(grid)                      # to combine plots
library(conflicted)                # handle package clashes
conflict_prefer("rename","dplyr")  # use rename from dplyr
conflict_prefer("filter", "dplyr")
theme_set(theme_minimal(base_size = 24))
# import summaries
setwd("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Output/")
mod_summaries = read.csv("age_ROI_stats.csv")
CIs = read.csv("age_wholebrain_stats.csv")
# load ROI info from DB
ROI1_info=read.csv("/media/b6036780/8TB1/norm-ieeg-age-sex-site/Data/ROI1_info.csv")
# colours
fb_colors=c("#3366ff","#bf80ff","#ff00bf","#3de600","#00cccc")
# bands
band = c("delta","theta","alpha","beta","gamma")
# greek letters
fb_lab=c(expression(delta),expression(theta),expression(alpha),expression(beta),expression(gamma))
# attach roi & ppr info to region level stats
region_summaries=left_join(ROI1_info,mod_summaries)
region_summaries_RH = na.omit(region_summaries) %>%
arrange(no.pts) %>%
mutate(Area=factor(Area,levels=Area))
# create factor for whole brain
CIs = CIs %>% mutate(Band=factor(Band, levels=Band))
# clear work space
rm(mod_summaries, ROI1_info)
ppr=ggplot(data=region_summaries_RH) +
geom_col(aes(x=Area,y=no.pts), fill="grey") +ylab("No. of subjects in region") +
theme(axis.title.y=element_text(margin=margin(r=10)),axis.text.x=element_blank(),
axis.title.x = element_blank(),panel.grid.major.x = element_blank())
region_CI = region_summaries_RH %>%
select(c("Area","no.pts",paste0(band,"_none0_CI"),paste0(band,"_singular")))
# make different indicator for each fb (delta: 0s & 1s, theta: 0s and 2s, etc)
# this enables plotting each band in a different colour
for (i in 2:5) {
region_CI[,paste0(band[i],"_none0_CI")] = region_CI[,paste0(band[i],"_none0_CI")]*(i)
}
# need to also include a singularity indicator in each fb column
# if singular, CI indicator doesn't matter/is overwritten
# assign -1 = singular, then there's still the 0 & n for the CI indicator
region_CI = region_CI %>%
mutate(delta_none0_CI = if_else(delta_singular==1,-1,delta_none0_CI)) %>%
mutate(theta_none0_CI = if_else(theta_singular==1,-1,theta_none0_CI)) %>%
mutate(alpha_none0_CI = if_else(alpha_singular==1,-1,alpha_none0_CI)) %>%
mutate(beta_none0_CI  = if_else(beta_singular ==1,-1,beta_none0_CI))  %>%
mutate(gamma_none0_CI = if_else(gamma_singular==1,-1,gamma_none0_CI)) %>%
select(-c(paste0(band,"_singular")))
# melt for suitable ggplot format and reformat new columns
region_CI = melt(region_CI, id.vars=c("Area","no.pts"))
region_CI = region_CI %>%
rename(freqband=variable) %>% mutate(freqband=gsub("_none0_CI","",freqband)) %>%
mutate(freqband=factor(freqband,levels = band)) %>% rename(none0_CI=value) %>%
mutate(none0_CI=factor(none0_CI,levels=-1:5))
# factor level order is -1 (singular), 0 (CI has 0), 1:5 (CI is none 0)
CI=ggplot(data = region_CI) +
geom_tile(aes(x=Area,y=freqband,fill=none0_CI),show.legend = F) +
xlab(NULL) + ylab(NULL) + scale_y_discrete(labels=rev(fb_lab), limits=rev) +
theme(axis.text.x=element_blank(),panel.grid.major.x=element_blank()) +
scale_fill_manual(values = c("black","white",fb_colors)) +
annotate("label", x=32.5,y=5,size=4.5,label="Shaded: CI does not contain 0\nWhite: CI contains 0\nBlack: Singular fit")
region_SE = region_summaries_RH %>%
select(c("Area","no.pts",paste0(band,"_SE")))
# melt for suitable ggplot format and reformat resulting columns
region_SE = melt(region_SE, id.vars=c("Area","no.pts"))
region_SE = region_SE %>%
rename(freqband=variable) %>% mutate(freqband=gsub("_SE","",freqband)) %>%
mutate(freqband=factor(freqband,levels = band)) %>% rename(SE=value)
SE=ggplot(data=region_SE) +
geom_line(aes(x=Area,y=SE, group=freqband,color=freqband)) +
ylab(expression(paste("Standard error of ",b[age]))) + xlab("Region name") +
scale_y_continuous(labels = comma) + scale_color_manual(values = fb_colors, labels=fb_lab) +
theme(axis.text.x=element_text(hjust=0,angle=-90,vjust=0.5),
legend.title=element_blank(), legend.position = c(0.8,0.7), legend.background = element_rect(colour="grey"),
axis.title.x=element_text(margin=margin(t=10)),axis.title.y=element_text(margin=margin(r=10)),
panel.grid.major.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(ppr),ggplotGrob(CI),ggplotGrob(SE)))
getwd()
options(scipen=999) # no sci notation
ggplot(data = CIs) +
geom_vline(xintercept = 0, linewidth = 2, color = "white") +
geom_vline(xintercept = 0, linetype = 2, col="gray30") +
geom_segment(mapping = aes(x=lower95ci,xend=upper95ci,y=Band, yend=Band), linewidth=2,lineend="butt") +
ylab(NULL) + xlab(expression(italic(beta[age]))) + scale_y_discrete(limits=rev) +
theme(panel.grid.major.y = element_blank(),axis.text.y = element_blank(),axis.title.x=element_text(margin=margin(t=10))) +
scale_x_continuous(breaks=c(-0.0008,-0.0004,0,0.0004,0.0008),limits = c(-0.0008,0.0008)) +
geom_point(aes(x=coeff,y=Band),size=5)
options(scipen=999) # no sci notation
ggplot(data = CIs) +
geom_vline(xintercept = 0, linewidth = 2, color = "white") +
geom_vline(xintercept = 0, linetype = 2, col="gray30") +
geom_segment(mapping = aes(x=lower95ci,xend=upper95ci,y=Band, yend=Band), linewidth=2,lineend="butt") +
ylab(NULL) + xlab(expression(italic(b[age]))) + scale_y_discrete(limits=rev) +
theme(panel.grid.major.y = element_blank(),axis.text.y = element_blank(),axis.title.x=element_text(margin=margin(t=10))) +
scale_x_continuous(breaks=c(-0.0008,-0.0004,0,0.0004,0.0008),limits = c(-0.0008,0.0008)) +
geom_point(aes(x=coeff,y=Band),size=5)
SE=ggplot(data=region_SE) +
geom_line(aes(x=Area,y=SE, group=freqband,color=freqband)) +
ylab(expression(paste("Standard error of ",italic(b[age])))) + xlab("Region name") +
scale_y_continuous(labels = comma) + scale_color_manual(values = fb_colors, labels=fb_lab) +
theme(axis.text.x=element_text(hjust=0,angle=-90,vjust=0.5),
legend.title=element_blank(), legend.position = c(0.8,0.7), legend.background = element_rect(colour="grey"),
axis.title.x=element_text(margin=margin(t=10)),axis.title.y=element_text(margin=margin(r=10)),
panel.grid.major.x = element_blank())
grid.newpage()
grid.draw(rbind(ggplotGrob(ppr),ggplotGrob(CI),ggplotGrob(SE)))
options(scipen=999) # no sci notation
ggplot(data = CIs) +
geom_vline(xintercept = 0, linewidth = 2, color = "white") +
geom_vline(xintercept = 0, linetype = 2, col="gray30") +
geom_segment(mapping = aes(x=lower95ci,xend=upper95ci,y=Band, yend=Band), linewidth=2,lineend="butt") +
ylab(NULL) + xlab(expression(italic(b[age]))) + scale_y_discrete(limits=rev) +
theme(panel.grid.major.y = element_blank(),axis.text.y = element_blank(),axis.title.x=element_text(margin=margin(t=10))) +
scale_x_continuous(breaks=c(-0.0008,-0.0004,0,0.0004,0.0008),limits = c(-0.0008,0.0008)) +
geom_point(aes(x=coeff,y=Band),size=5)
# select stats for matlab (betas)
beta_age = region_summaries %>%
select(c("ROI_name", "x", "y", "z", "Hemisphere","Cortical","Area",paste0(band,"_coef")))
# mirror
empty_rows=as.integer(row.names(beta_age[beta_age$Hemisphere=="Left",]))
for (i in empty_rows) {
if (beta_age$Cortical[i]=="SC" & beta_age$Area[i]==beta_age$Area[i+7]) {
beta_age[i,paste0(band,"_coef")]=beta_age[i+7,paste0(band, "_coef")]
}
else if (beta_age$Cortical[i]=="C" & beta_age$Area[i]==beta_age$Area[i+34]) {
beta_age[i,paste0(band,"_coef")]=beta_age[i+34,paste0(band,"_coef")]
}
}
# filter empty rows and give matlab names
beta_age = beta_age %>%
na.omit() %>%
rename(names=ROI_name) %>%
select(-c(Area,Hemisphere,Cortical))
# save
write.csv(beta_age, "beta_age_coeffs_ROI1.csv", row.names=FALSE)
View(beta_age)
